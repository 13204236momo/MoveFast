package com.example.administrator.movefast.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.movefast.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Pass_word = new Property(2, String.class, "pass_word", false, "PASS_WORD");
        public final static Property Is_login = new Property(3, int.class, "is_login", false, "IS_LOGIN");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Sign = new Property(5, String.class, "sign", false, "SIGN");
        public final static Property Sex = new Property(6, int.class, "sex", false, "SEX");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property Head_img = new Property(8, String.class, "head_img", false, "HEAD_IMG");
        public final static Property Current_address = new Property(9, String.class, "current_address", false, "CURRENT_ADDRESS");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACCOUNT\" TEXT NOT NULL ," + // 1: account
                "\"PASS_WORD\" TEXT NOT NULL ," + // 2: pass_word
                "\"IS_LOGIN\" INTEGER NOT NULL ," + // 3: is_login
                "\"NAME\" TEXT," + // 4: name
                "\"SIGN\" TEXT," + // 5: sign
                "\"SEX\" INTEGER NOT NULL ," + // 6: sex
                "\"PHONE\" TEXT," + // 7: phone
                "\"HEAD_IMG\" TEXT," + // 8: head_img
                "\"CURRENT_ADDRESS\" TEXT);"); // 9: current_address
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAccount());
        stmt.bindString(3, entity.getPass_word());
        stmt.bindLong(4, entity.getIs_login());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(6, sign);
        }
        stmt.bindLong(7, entity.getSex());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(9, head_img);
        }
 
        String current_address = entity.getCurrent_address();
        if (current_address != null) {
            stmt.bindString(10, current_address);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getAccount());
        stmt.bindString(3, entity.getPass_word());
        stmt.bindLong(4, entity.getIs_login());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(6, sign);
        }
        stmt.bindLong(7, entity.getSex());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String head_img = entity.getHead_img();
        if (head_img != null) {
            stmt.bindString(9, head_img);
        }
 
        String current_address = entity.getCurrent_address();
        if (current_address != null) {
            stmt.bindString(10, current_address);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // account
            cursor.getString(offset + 2), // pass_word
            cursor.getInt(offset + 3), // is_login
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sign
            cursor.getInt(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // head_img
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // current_address
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.getString(offset + 1));
        entity.setPass_word(cursor.getString(offset + 2));
        entity.setIs_login(cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSign(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.getInt(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHead_img(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCurrent_address(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

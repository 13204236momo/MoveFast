package com.example.administrator.movefast.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.administrator.movefast.entity.WayBill;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WAY_BILL".
*/
public class WayBillDao extends AbstractDao<WayBill, Long> {

    public static final String TABLENAME = "WAY_BILL";

    /**
     * Properties of entity WayBill.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Price = new Property(4, String.class, "price", false, "PRICE");
        public final static Property Track_num = new Property(5, String.class, "track_num", false, "TRACK_NUM");
        public final static Property Create_time = new Property(6, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Is_end = new Property(7, int.class, "is_end", false, "IS_END");
    }


    public WayBillDao(DaoConfig config) {
        super(config);
    }
    
    public WayBillDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WAY_BILL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"ADDRESS\" TEXT NOT NULL ," + // 2: address
                "\"PHONE\" TEXT NOT NULL ," + // 3: phone
                "\"PRICE\" TEXT NOT NULL ," + // 4: price
                "\"TRACK_NUM\" TEXT NOT NULL UNIQUE ," + // 5: track_num
                "\"CREATE_TIME\" TEXT NOT NULL ," + // 6: create_time
                "\"IS_END\" INTEGER NOT NULL );"); // 7: is_end
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WAY_BILL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WayBill entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getAddress());
        stmt.bindString(4, entity.getPhone());
        stmt.bindString(5, entity.getPrice());
        stmt.bindString(6, entity.getTrack_num());
        stmt.bindString(7, entity.getCreate_time());
        stmt.bindLong(8, entity.getIs_end());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WayBill entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getAddress());
        stmt.bindString(4, entity.getPhone());
        stmt.bindString(5, entity.getPrice());
        stmt.bindString(6, entity.getTrack_num());
        stmt.bindString(7, entity.getCreate_time());
        stmt.bindLong(8, entity.getIs_end());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WayBill readEntity(Cursor cursor, int offset) {
        WayBill entity = new WayBill( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // address
            cursor.getString(offset + 3), // phone
            cursor.getString(offset + 4), // price
            cursor.getString(offset + 5), // track_num
            cursor.getString(offset + 6), // create_time
            cursor.getInt(offset + 7) // is_end
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WayBill entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAddress(cursor.getString(offset + 2));
        entity.setPhone(cursor.getString(offset + 3));
        entity.setPrice(cursor.getString(offset + 4));
        entity.setTrack_num(cursor.getString(offset + 5));
        entity.setCreate_time(cursor.getString(offset + 6));
        entity.setIs_end(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WayBill entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WayBill entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WayBill entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
